<?xml version="1.0" encoding="UTF-8"?>
<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor 
	license agreements. See the NOTICE file distributed with this work for additional 
	information regarding copyright ownership. The ASF licenses this file to 
	You under the Apache License, Version 2.0 (the "License"); you may not use 
	this file except in compliance with the License. You may obtain a copy of 
	the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
         http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

	<!-- JMS QPid Proton Configuration -->
	<bean id="jmsConnectionFactory"
		class="org.apache.qpid.jms.JmsConnectionFactory">
		<property name="remoteURI"
			value="amqp://${bmh.qpid.host}:5672" />
		<property name="username" value="guest" />
		<property name="password" value="guest" />
	</bean>

	<!-- Camel AMQP Component configuration -->
	<bean id="amqp"
		class="org.apache.camel.component.amqp.AMQPComponent">
		<property name="connectionFactory" ref="jmsConnectionFactory" />
	</bean>

	<bean id="serializationUtil"
		class="com.raytheon.uf.common.serialization.SerializationUtil" />

	<bean id="synthesizeText"
		class="gov.noaa.nws.bmh_edge.audio.googleapi.SynthesizeText">
	</bean>

	<bean id="googleApi"
		class="gov.noaa.nws.bmh_edge.utility.GoogleSpeechUtility">
		<property name="synthesizeText" ref="synthesizeText" />
		<property name="audioOut" value="${google.speech.dir}" />
	</bean>

	<bean id="playlistUtil"
		class="gov.noaa.nws.bmh_edge.utility.BmhPlaylistUtility">
		<property name="transmitterID" value="${bmh.transmitter.id}" />
<!-- 		<property name="service" ref="broadcastService" /> -->
	</bean>
	
<!-- 	<bean id="broadcastService" class="gov.noaa.nws.bmh_edge.services.PlaylistService" /> -->

	<bean id="mp3Player"
		class="gov.noaa.nws.bmh_edge.audio.mp3.MP3Player" />

	<camelContext id="BmhEdge"
		xmlns="http://camel.apache.org/schema/spring" trace="true">
		<dataFormats>
			<!-- here we define a Json data format with the id jack. -->
			<json id="googleAPIJson" library="Jackson" />
		</dataFormats>

		<rest>
			<get uri="/hello">
				<to uri="direct:hello" />
			</get>
			<get uri="/bye" consumes="application/json">
				<to uri="direct:bye" />
			</get>
			<get uri="status"
				consumes="application/vnd.spring-boot.actuator.v1+json">
				<to uri="direct:status" />
			</get>
			<post uri="/bye">
				<to uri="mock:update" />
			</post>
		</rest>

		<route id="bmh-ingest" trace="true">
			<from uri="amqp:queue:{{bmh.qpid.queue}}" />
			<bean ref="serializationUtil" method="transformFromThrift" />

			<choice>
				<when>
					<simple>${body} is
						'java.lang.String' and ${body} contains
						'bmhPlaylist'
					</simple>
					<log message="Received String: ${body}" />
					<!-- http://camel.465427.n5.nabble.com/Camel-JAXB-jaxb-index-not-found-td5795819.html -->
					<unmarshal>
						<jaxb prettyPrint="true"
							contextPath="com.raytheon.uf.common.bmh.datamodel.playlist" />
					</unmarshal>
					<to uri="mock:ingestjaxb" />
					<to uri="direct:scheduler" />
				</when>
				<when>
					<simple>${body} is
						'java.lang.String' and ${body} contains
						'bmhMessageMetadata'
					</simple>
					<log message="Received String: ${body}" />
					<!-- http://camel.465427.n5.nabble.com/Camel-JAXB-jaxb-index-not-found-td5795819.html -->
					<unmarshal>
						<jaxb prettyPrint="true"
							contextPath="com.raytheon.uf.common.bmh.datamodel.playlist" />
					</unmarshal>
					<to uri="mock:ingestjaxb" />
					<to uri="seda:audio?size=100&amp;purgeWhenStopping=true" />
				</when>
				<otherwise>
					<log message="Invalid Ingest Object ${body}"
						loggingLevel="ERROR" logName="gov.noaa.nws" />
				</otherwise>
			</choice>
		</route>

		<route id="bmh-audio" trace="true">
			<from uri="seda:audio?size=100&amp;purgeWhenStopping=true" />

			<bean ref="googleApi" method="createTextToSpeechBean" />
			<to uri="log:gov.noaa.nws.bmh_edge.utility?level=INFO" />
			<bean ref="playlistUtil" method="addMessage" />
			<to uri="mock:audioresponse" />
		</route>

		<route id="bmh-scheduler">
			<from uri="direct:scheduler" />
			<bean ref="playlistUtil" method="updatePlaylist"/>
			<to uri="mock:scheduler" />
		</route>

		<route id="bmh-playlist">
			<from uri="direct:playlist" />
			<bean ref="playlistUtil" method="transmitterCheck" />
			<when>
				<simple>${header.trans_check}</simple>
				
			</when>
		</route>

		<route>
			<from uri="direct:hello" />
			<transform>
				<constant>Hello World</constant>
			</transform>
		</route>
		<route>
			<from uri="direct:bye" />
			<transform>
				<constant>Bye World</constant>
			</transform>
		</route>
		<route>
			<from uri="direct:status" />
			<setHeader headerName="CamelHttpMethod">
				<constant>GET</constant>
			</setHeader>
			<to uri="http4://localhost:8081/info?bridgeEndpoint=true" />
			<transform>
				<simple>${body}</simple>
			</transform>
		</route>
	</camelContext>

</beans>
